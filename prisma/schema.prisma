// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  studentId  String   @unique
  bio        String?
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  // Friend relationships: one where the user sent requests and one where they received them.
  friendsRequested Friend[] @relation("Requesters")
  friendsReceived  Friend[] @relation("Receivers")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Like {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  post   Post  @relation(fields: [postId], references: [id])
  postId Int
}

model Friend {
  id          Int      @id @default(autoincrement())
  requester   User     @relation("Requesters", fields: [requesterId], references: [id])
  requesterId Int
  receiver    User     @relation("Receivers", fields: [receiverId], references: [id])
  receiverId  Int
  status      String   // e.g., 'pending', 'accepted', 'rejected'
  requestedAt DateTime @default(now())
}








